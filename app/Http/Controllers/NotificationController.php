<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Http\JsonResponse;
use App\Models\Club;
use App\Models\User;
use App\Models\UserClub;
use App\Services\ZaloNotificationService;

class NotificationController extends Controller
{
    protected $zaloNotificationService;

    public function __construct(ZaloNotificationService $zaloNotificationService)
    {
        $this->zaloNotificationService = $zaloNotificationService;
    }

    /**
     * G·ª≠i th√¥ng b√°o ƒëi·ªÉm danh cho th√†nh vi√™n trong c√¢u l·∫°c b·ªô
     * S·ª≠ d·ª•ng k·∫øt h·ª£p broadcast mi·ªÖn ph√≠ v√† g·ª≠i c√° nh√¢n h√≥a
     */
    public function sendAttendanceNotification(Request $request): JsonResponse
    {
        try {
            $validated = $request->validate([
                'club_id' => 'required|integer|exists:clubs,id',
                'zalo_gid' => 'required|string',
                'method' => 'nullable|string|in:broadcast,personal,auto'
            ]);

            $clubId = $validated['club_id'];
            $zaloGid = $validated['zalo_gid'];
            $method = $validated['method'] ?? 'auto';

            // L·∫•y th√¥ng tin club
            $club = Club::find($clubId);
            if (!$club) {
                return response()->json([
                    'success' => false,
                    'message' => 'Kh√¥ng t√¨m th·∫•y c√¢u l·∫°c b·ªô'
                ], 404);
            }

            // L·∫•y th√¥ng tin Zalo OA t·ª´ config
            $zaloAppId = env('ZALO_APP_ID');
            $zaloOaId = env('ZALO_OA_ID');

            if (!$zaloAppId || !$zaloOaId) {
                return response()->json([
                    'success' => false,
                    'message' => 'C·∫•u h√¨nh Zalo OA ch∆∞a ƒë·∫ßy ƒë·ªß'
                ], 500);
            }

            // L·∫•y danh s√°ch th√†nh vi√™n c·ªßa club
            $members = User::whereHas('clubs', function($query) use ($clubId) {
                $query->where('club_id', $clubId);
            })->whereNotNull('zalo_gid')->get();

            $totalMembers = $members->count();

            // Quy·∫øt ƒë·ªãnh ph∆∞∆°ng ph√°p g·ª≠i
            if ($method === 'auto') {
                // T·ª± ƒë·ªông ch·ªçn ph∆∞∆°ng ph√°p d·ª±a tr√™n s·ªë l∆∞·ª£ng th√†nh vi√™n
                if ($totalMembers <= 10) {
                    $method = 'personal'; // √çt th√†nh vi√™n: g·ª≠i c√° nh√¢n h√≥a
                } else {
                    $method = 'broadcast'; // Nhi·ªÅu th√†nh vi√™n: d√πng broadcast
                }
            }

            if ($method === 'broadcast') {
                // S·ª≠ d·ª•ng Tin Truy·ªÅn th√¥ng OA - g·ª≠i broadcast mi·ªÖn ph√≠
                $message = "üì¢ Th√¥ng b√°o ƒëi·ªÉm danh t·ª´ c√¢u l·∫°c b·ªô {$club->name}!\n\nC√≥ s·ª± ki·ªán ƒëi·ªÉm danh m·ªõi, h√£y v√†o ·ª©ng d·ª•ng ƒë·ªÉ tham gia!";
                
                $result = $this->zaloNotificationService->sendBroadcastMessage(
                    $message,
                    $zaloAppId,
                    $zaloOaId
                );

                if ($result['success']) {
                    return response()->json([
                        'success' => true,
                        'message' => "ƒê√£ g·ª≠i th√¥ng b√°o broadcast ƒë·∫øn t·∫•t c·∫£ ng∆∞·ªùi follow OA (c√≥ {$totalMembers} th√†nh vi√™n trong club)",
                        'data' => [
                            'method' => 'broadcast',
                            'club_name' => $club->name,
                            'total_members' => $totalMembers,
                            'zalo_response' => $result['data']
                        ]
                    ]);
                } else {
                    return response()->json([
                        'success' => false,
                        'message' => 'G·ª≠i th√¥ng b√°o broadcast th·∫•t b·∫°i: ' . $result['message']
                    ], 500);
                }
            } else {
                // G·ª≠i c√° nh√¢n h√≥a cho t·ª´ng th√†nh vi√™n trong club
                $successCount = 0;
                $failCount = 0;
                $errors = [];

                foreach ($members as $member) {
                    try {
                        $result = $this->zaloNotificationService->sendCheckinNotification(
                            $member->zalo_gid,
                            $zaloAppId,
                            $zaloOaId
                        );

                        if ($result && isset($result['error']) && $result['error'] == 0) {
                            $successCount++;
                        } else {
                            $failCount++;
                            $errors[] = "G·ª≠i th√¥ng b√°o cho {$member->name} th·∫•t b·∫°i: " . 
                                       ($result['message'] ?? 'L·ªói kh√¥ng x√°c ƒë·ªãnh');
                        }
                    } catch (\Exception $e) {
                        $failCount++;
                        $errors[] = "L·ªói khi g·ª≠i th√¥ng b√°o cho {$member->name}: " . $e->getMessage();
                    }
                }

                return response()->json([
                    'success' => true,
                    'message' => "ƒê√£ g·ª≠i th√¥ng b√°o cho {$successCount} th√†nh vi√™n trong c√¢u l·∫°c b·ªô",
                    'data' => [
                        'method' => 'personal',
                        'club_name' => $club->name,
                        'total_members' => $totalMembers,
                        'success_count' => $successCount,
                        'fail_count' => $failCount,
                        'errors' => $errors
                    ]
                ]);
            }

        } catch (\Exception $e) {
            return response()->json([
                'success' => false,
                'message' => 'C√≥ l·ªói x·∫£y ra: ' . $e->getMessage()
            ], 500);
        }
    }

    /**
     * G·ª≠i th√¥ng b√°o ƒëi·ªÉm danh cho t·ª´ng th√†nh vi√™n c·ª• th·ªÉ (c√≥ ph√≠)
     * Ch·ªâ s·ª≠ d·ª•ng khi c·∫ßn g·ª≠i c√° nh√¢n h√≥a
     */
    public function sendAttendanceNotificationToMembers(Request $request): JsonResponse
    {
        try {
            $validated = $request->validate([
                'club_id' => 'required|integer|exists:clubs,id',
                'zalo_gid' => 'required|string'
            ]);

            $clubId = $validated['club_id'];
            $zaloGid = $validated['zalo_gid'];

            // L·∫•y th√¥ng tin club
            $club = Club::find($clubId);
            if (!$club) {
                return response()->json([
                    'success' => false,
                    'message' => 'Kh√¥ng t√¨m th·∫•y c√¢u l·∫°c b·ªô'
                ], 404);
            }

            // L·∫•y t·∫•t c·∫£ th√†nh vi√™n c·ªßa club
            $members = User::whereHas('clubs', function($query) use ($clubId) {
                $query->where('club_id', $clubId);
            })->get();

            if ($members->isEmpty()) {
                return response()->json([
                    'success' => false,
                    'message' => 'Kh√¥ng c√≥ th√†nh vi√™n n√†o trong c√¢u l·∫°c b·ªô'
                ], 400);
            }

            // L·∫•y th√¥ng tin Zalo OA t·ª´ config
            $zaloAppId = env('ZALO_APP_ID');
            $zaloOaId = env('ZALO_OA_ID');

            if (!$zaloAppId || !$zaloOaId) {
                return response()->json([
                    'success' => false,
                    'message' => 'C·∫•u h√¨nh Zalo OA ch∆∞a ƒë·∫ßy ƒë·ªß'
                ], 500);
            }

            $successCount = 0;
            $failCount = 0;
            $errors = [];

            // G·ª≠i th√¥ng b√°o cho t·ª´ng th√†nh vi√™n
            foreach ($members as $member) {
                try {
                    // Ki·ªÉm tra xem member c√≥ zalo_gid kh√¥ng
                    if (!$member->zalo_gid) {
                        $failCount++;
                        $errors[] = "Th√†nh vi√™n {$member->name} kh√¥ng c√≥ zalo_gid";
                        continue;
                    }

                    // G·ª≠i th√¥ng b√°o
                    $result = $this->zaloNotificationService->sendCheckinNotification(
                        $member->zalo_gid,
                        $zaloAppId,
                        $zaloOaId
                    );

                    if ($result && isset($result['error']) && $result['error'] == 0) {
                        $successCount++;
                    } else {
                        $failCount++;
                        $errors[] = "G·ª≠i th√¥ng b√°o cho {$member->name} th·∫•t b·∫°i: " . 
                                   ($result['message'] ?? 'L·ªói kh√¥ng x√°c ƒë·ªãnh');
                    }
                } catch (\Exception $e) {
                    $failCount++;
                    $errors[] = "L·ªói khi g·ª≠i th√¥ng b√°o cho {$member->name}: " . $e->getMessage();
                }
            }

            return response()->json([
                'success' => true,
                'message' => "ƒê√£ g·ª≠i th√¥ng b√°o cho {$successCount} th√†nh vi√™n",
                'data' => [
                    'total_members' => $members->count(),
                    'success_count' => $successCount,
                    'fail_count' => $failCount,
                    'errors' => $errors
                ]
            ]);

        } catch (\Exception $e) {
            return response()->json([
                'success' => false,
                'message' => 'C√≥ l·ªói x·∫£y ra: ' . $e->getMessage()
            ], 500);
        }
    }

    /**
     * Test g·ª≠i th√¥ng b√°o cho m·ªôt th√†nh vi√™n c·ª• th·ªÉ
     */
    public function testNotification(Request $request): JsonResponse
    {
        try {
            $validated = $request->validate([
                'zalo_gid' => 'required|string'
            ]);

            $zaloGid = $validated['zalo_gid'];
            $zaloAppId = env('ZALO_APP_ID');
            $zaloOaId = env('ZALO_OA_ID');

            if (!$zaloAppId || !$zaloOaId) {
                return response()->json([
                    'success' => false,
                    'message' => 'C·∫•u h√¨nh Zalo OA ch∆∞a ƒë·∫ßy ƒë·ªß'
                ], 500);
            }

            $result = $this->zaloNotificationService->sendCheckinNotification(
                $zaloGid,
                $zaloAppId,
                $zaloOaId
            );

            return response()->json([
                'success' => true,
                'message' => 'Test g·ª≠i th√¥ng b√°o th√†nh c√¥ng',
                'data' => $result
            ]);

        } catch (\Exception $e) {
            return response()->json([
                'success' => false,
                'message' => 'C√≥ l·ªói x·∫£y ra: ' . $e->getMessage()
            ], 500);
        }
    }
}
