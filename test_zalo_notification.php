<?php

/**
 * Test script ƒë·ªÉ ki·ªÉm tra ch·ª©c nƒÉng g·ª≠i th√¥ng b√°o Zalo OA (MI·ªÑN PH√ç)
 * 
 * D·ª±a tr√™n h∆∞·ªõng d·∫´n ch√≠nh th·ª©c: https://developers.zalo.me/docs/official-account/bat-dau/xac-thuc-va-uy-quyen-cho-ung-dung-new
 * 
 * C√°ch s·ª≠ d·ª•ng:
 * 1. ƒê·∫£m b·∫£o ƒë√£ c·∫•u h√¨nh ZALO_OA_ACCESS_TOKEN trong .env
 * 2. Ch·∫°y: php test_zalo_notification.php
 */

require_once 'vendor/autoload.php';

// Bootstrap Laravel application
$app = require_once 'bootstrap/app.php';
$app->make('Illuminate\Contracts\Console\Kernel')->bootstrap();

use App\Services\ZaloNotificationService;

echo "üß™ Testing Zalo OA Notification Service (MI·ªÑN PH√ç)\n";
echo "================================================\n";
echo "üìö D·ª±a tr√™n: https://developers.zalo.me/docs/official-account/bat-dau/xac-thuc-va-uy-quyen-cho-ung-dung-new\n\n";

// Test 1: Ki·ªÉm tra c·∫•u h√¨nh
echo "1. Ki·ªÉm tra c·∫•u h√¨nh Zalo OA (MI·ªÑN PH√ç):\n";
$accessToken = config('services.zalo.oa_access_token');
$appId = config('services.zalo.app_id');
$oaId = config('services.zalo.oa_id');

if (!$accessToken) {
    echo "‚ùå ZALO_OA_ACCESS_TOKEN ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh\n";
    echo "üí° Ch·ªâ c·∫ßn ZALO_OA_ACCESS_TOKEN l√† ƒë·ªß ƒë·ªÉ g·ª≠i broadcast mi·ªÖn ph√≠!\n";
    exit(1);
}

echo "‚úÖ ZALO_OA_ACCESS_TOKEN: " . substr($accessToken, 0, 10) . "...\n";
if ($appId) {
    echo "‚úÖ ZALO_APP_ID: $appId\n";
} else {
    echo "‚ö†Ô∏è  ZALO_APP_ID: Ch∆∞a c·∫•u h√¨nh (kh√¥ng b·∫Øt bu·ªôc cho broadcast)\n";
}
if ($oaId) {
    echo "‚úÖ ZALO_OA_ID: $oaId\n";
} else {
    echo "‚ö†Ô∏è  ZALO_OA_ID: Ch∆∞a c·∫•u h√¨nh (kh√¥ng b·∫Øt bu·ªôc cho broadcast)\n";
}
echo "\n";

// Test 2: T·∫°o service instance
echo "2. T·∫°o ZaloNotificationService instance:\n";
try {
    $notificationService = new ZaloNotificationService();
    echo "‚úÖ Service created successfully\n\n";
} catch (Exception $e) {
    echo "‚ùå Error creating service: " . $e->getMessage() . "\n";
    exit(1);
}

// Test 3: Test g·ª≠i broadcast mi·ªÖn ph√≠
echo "3. Test g·ª≠i broadcast mi·ªÖn ph√≠:\n";
echo "B·∫°n c√≥ mu·ªën test g·ª≠i broadcast ƒë·∫øn t·∫•t c·∫£ ng∆∞·ªùi follow OA? (y/n): ";
$confirm = trim(fgets(STDIN));

if (strtolower($confirm) === 'y' || strtolower($confirm) === 'yes') {
    echo "G·ª≠i broadcast message...\n";
    
    $message = "üß™ Test th√¥ng b√°o ƒëi·ªÉm danh t·ª´ h·ªá th·ªëng!\n\nƒê√¢y l√† tin nh·∫Øn test ƒë·ªÉ ki·ªÉm tra ch·ª©c nƒÉng g·ª≠i th√¥ng b√°o mi·ªÖn ph√≠.";
    $result = $notificationService->sendBroadcastMessage($message, $appId ?? 'test_app', $oaId ?? 'test_oa');
    
    if ($result['success']) {
        echo "‚úÖ G·ª≠i broadcast th√†nh c√¥ng!\n";
        echo "Response: " . json_encode($result, JSON_PRETTY_PRINT) . "\n";
    } else {
        echo "‚ùå G·ª≠i broadcast th·∫•t b·∫°i!\n";
        echo "Error: " . $result['message'] . "\n";
        echo "Response: " . json_encode($result, JSON_PRETTY_PRINT) . "\n";
    }
} else {
    echo "‚è≠Ô∏è  Skipped broadcast test\n";
}

// Test 4: Test g·ª≠i th√¥ng b√°o ƒë·∫øn Zalo ID c·ª• th·ªÉ (MI·ªÑN PH√ç)
echo "\n4. Test g·ª≠i th√¥ng b√°o ƒë·∫øn Zalo ID c·ª• th·ªÉ (MI·ªÑN PH√ç):\n";
$testZaloId = '5170627724267093288';
echo "Zalo ID test: $testZaloId\n";
echo "B·∫°n c√≥ mu·ªën test g·ª≠i tin nh·∫Øn ƒë·∫øn Zalo ID n√†y? (y/n): ";
$confirm = trim(fgets(STDIN));

if (strtolower($confirm) === 'y' || strtolower($confirm) === 'yes') {
    echo "G·ª≠i th√¥ng b√°o ƒë·∫øn Zalo ID: $testZaloId\n";
    
    // Test g·ª≠i tin nh·∫Øn text ƒë∆°n gi·∫£n (MI·ªÑN PH√ç)
    $message = "üß™ Test th√¥ng b√°o t·ª´ Zalo OA!\n\nƒê√¢y l√† tin nh·∫Øn test ƒë·ªÉ ki·ªÉm tra ch·ª©c nƒÉng g·ª≠i th√¥ng b√°o mi·ªÖn ph√≠ ƒë·∫øn Zalo ID c·ª• th·ªÉ.\n\nTh·ªùi gian: " . date('Y-m-d H:i:s');
    
    $result = $notificationService->sendCheckinNotification($testZaloId, $appId ?? 'test_app', $oaId ?? 'test_oa');
    
    if ($result['success']) {
        echo "‚úÖ G·ª≠i th√¥ng b√°o ƒë·∫øn Zalo ID th√†nh c√¥ng!\n";
        echo "Response: " . json_encode($result, JSON_PRETTY_PRINT) . "\n";
    } else {
        echo "‚ùå G·ª≠i th√¥ng b√°o ƒë·∫øn Zalo ID th·∫•t b·∫°i!\n";
        echo "Error: " . $result['message'] . "\n";
        echo "Response: " . json_encode($result, JSON_PRETTY_PRINT) . "\n";
        
        // Th√¥ng tin debug
        echo "\nüîç Debug info:\n";
        echo "- Zalo ID: $testZaloId\n";
        echo "- App ID: " . ($appId ?? 'NOT SET') . "\n";
        echo "- OA ID: " . ($oaId ?? 'NOT SET') . "\n";
        echo "- Access Token: " . (substr($accessToken, 0, 10) . '...' ?? 'NOT SET') . "\n";
    }
} else {
    echo "‚è≠Ô∏è  Skipped Zalo ID test\n";
}

// Test 5: Test g·ª≠i th√¥ng b√°o c√° nh√¢n (c√≥ ph√≠) - Legacy
echo "\n5. Test g·ª≠i th√¥ng b√°o c√° nh√¢n (c√≥ ph√≠) - Legacy:\n";
echo "Nh·∫≠p zalo_gid kh√°c ƒë·ªÉ test g·ª≠i c√° nh√¢n (ho·∫∑c nh·∫•n Enter ƒë·ªÉ skip): ";
$zaloGid = trim(fgets(STDIN));

if ($zaloGid) {
    echo "G·ª≠i th√¥ng b√°o c√° nh√¢n ƒë·∫øn zalo_gid: $zaloGid\n";
    
    $result = $notificationService->sendCheckinNotification($zaloGid, $appId ?? 'test_app', $oaId ?? 'test_oa');
    
    if ($result['success']) {
        echo "‚úÖ G·ª≠i th√¥ng b√°o c√° nh√¢n th√†nh c√¥ng!\n";
        echo "Response: " . json_encode($result, JSON_PRETTY_PRINT) . "\n";
    } else {
        echo "‚ùå G·ª≠i th√¥ng b√°o c√° nh√¢n th·∫•t b·∫°i!\n";
        echo "Error: " . $result['message'] . "\n";
        echo "Response: " . json_encode($result, JSON_PRETTY_PRINT) . "\n";
    }
} else {
    echo "‚è≠Ô∏è  Skipped personal notification test\n";
}

echo "\n6. Test API endpoint:\n";
echo "B·∫°n c√≥ th·ªÉ test API endpoint b·∫±ng c√°ch:\n\n";

echo "üéØ Test g·ª≠i th√¥ng b√°o ƒë·∫øn Zalo ID c·ª• th·ªÉ (MI·ªÑN PH√ç):\n";
echo "curl -X POST http://localhost/club/public/api/notifications/test \\\n";
echo "  -H 'Content-Type: application/json' \\\n";
echo "  -d '{\"zalo_gid\": \"5170627724267093288\"}'\n\n";

echo "üöÄ Test g·ª≠i th√¥ng b√°o t·ª± ƒë·ªông (khuy·∫øn ngh·ªã):\n";
echo "curl -X POST http://localhost/club/public/api/notifications/send-attendance \\\n";
echo "  -H 'Content-Type: application/json' \\\n";
echo "  -d '{\"club_id\": 1, \"zalo_gid\": \"5170627724267093288\", \"method\": \"auto\"}'\n\n";

echo "üë§ Test g·ª≠i th√¥ng b√°o c√° nh√¢n (c√≥ ph√≠):\n";
echo "curl -X POST http://localhost/club/public/api/notifications/send-attendance \\\n";
echo "  -H 'Content-Type: application/json' \\\n";
echo "  -d '{\"club_id\": 1, \"zalo_gid\": \"5170627724267093288\", \"method\": \"personal\"}'\n\n";

echo "üì¢ Test g·ª≠i broadcast mi·ªÖn ph√≠:\n";
echo "curl -X POST http://localhost/club/public/api/notifications/send-attendance \\\n";
echo "  -H 'Content-Type: application/json' \\\n";
echo "  -d '{\"club_id\": 1, \"zalo_gid\": \"5170627724267093288\", \"method\": \"broadcast\"}'\n\n";

echo "üë• Test g·ª≠i th√¥ng b√°o c√° nh√¢n (legacy):\n";
echo "curl -X POST http://localhost/club/public/api/notifications/send-attendance-members \\\n";
echo "  -H 'Content-Type: application/json' \\\n";
echo "  -d '{\"club_id\": 1, \"zalo_gid\": \"5170627724267093288\"}'\n\n";

echo "üîó H∆∞·ªõng d·∫´n l·∫•y Zalo OA Access Token:\n";
echo "1. Truy c·∫≠p: https://business.zalo.me/\n";
echo "2. ƒêƒÉng nh·∫≠p v√† ch·ªçn Official Account\n";
echo "3. V√†o C√†i ƒë·∫∑t ‚Üí T√≠ch h·ª£p ‚Üí L·∫•y Access Token\n";
echo "4. C·∫≠p nh·∫≠t ZALO_OA_ACCESS_TOKEN trong file .env\n\n";

echo "üìö T√†i li·ªáu tham kh·∫£o:\n";
echo "https://developers.zalo.me/docs/official-account/bat-dau/xac-thuc-va-uy-quyen-cho-ung-dung-new\n\n";

echo "üéâ Test completed!\n";
echo "üí° L∆∞u √Ω: S·ª≠ d·ª•ng broadcast mi·ªÖn ph√≠ thay v√¨ g·ª≠i c√° nh√¢n ƒë·ªÉ ti·∫øt ki·ªám chi ph√≠!\n";
echo "üéØ Zalo ID test: 5170627724267093288\n";
